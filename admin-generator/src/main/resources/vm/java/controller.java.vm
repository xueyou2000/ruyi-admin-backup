package ${packageName}.controller;

import cn.hutool.core.convert.Convert;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.xueyou.admin.common.core.vo.Response;
import com.xueyou.admin.system.auth.annotation.HasPermissions;
import com.xueyou.admin.system.log.enums.BusinessType;

import ${packageName}.domain.${ClassName};
import ${packageName}.model.dto.${ClassName}Query;
import ${packageName}.service.${ClassName}Service;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.util.Arrays;

/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${className}")
@Api(value = "${ClassName}Controller", tags = "${comments}")
public class ${ClassName}Controller {

    @Resource
    private ${ClassName}Service ${className}Service;

    /**
     * 查询${comments}
     */
    @ApiOperation(value = "查询${comments}",  httpMethod = "POST")
    @PostMapping(value = "/findByPage/{pageSize}/{pageNumber}", produces = "application/json;charset=UTF-8")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNumber", value = "页码", paramType = "path", required = true),
            @ApiImplicitParam(name = "pageSize", value = "每页数量", paramType = "path", required = true)
    })
    @HasPermissions("${moduleName}:${className}:view")
    public Response<IPage<${ClassName}>> findByPage(@PathVariable Integer pageSize, @PathVariable Integer pageNumber, @RequestBody ${ClassName}Query queryDto) {
        IPage<${ClassName}> page = new Page<>(pageNumber, pageSize);
        return Response.ok(${className}Service.queryByPage(page, queryDto.get${ClassName}(), queryDto.getQueryBaseDto()));
    }

    /**
     * 新增${comments}
     */
    @ApiOperation(value = "新增${comments}",  httpMethod = "POST")
    @HasPermissions("${moduleName}:${className}:add")
    @PostMapping("/add")
    public Response<Boolean> add(@RequestBody ${ClassName} ${className}) {
        return Response.ok(${className}Service.save(${className}));
    }

    /**
     * 修改${comments}
     */
    @ApiOperation(value = "修改${comments}",  httpMethod = "POST")
    @HasPermissions("${moduleName}:${className}:update")
    @PostMapping("/update")
    public Response<Boolean> update(@RequestBody ${ClassName} ${className}) {
        return Response.ok(${className}Service.updateById(${className}));
    }

    /**
     * 删除${comments}
     */
    @ApiOperation(value = "删除${comments}",  httpMethod = "POST")
    @HasPermissions("${moduleName}:${className}:remove")
    @PostMapping("/remove")
    public Response<Boolean> remove(@RequestParam String ids) {
        return Response.ok(${className}Service.removeByIds(Arrays.asList(Convert.toStrArray(ids))));
    }

}